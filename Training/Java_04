## if

```java
int num = 5;
if (num == 5) {
     System.out.println("numは5です");
}
```

if文は処理の分岐を作る事ができます。`if()`の`()`の中に条件を書いて、条件の結果を`boolean`で判定します。
つまり`true`か`false`かを判定することで、`if(){}`の`{}`内に書かれた処理を実行するかしないかを条件判定します。
例として書いているif文だと、if文の前にint型の変数`num`に5を代入しています。
`if (num == 5)` で、numが5かどうかを判定しています。
`num == 5`を判定した結果、`true`を受け取った場合は、`{}`内に書いた処理である文字出力を実行します。
`num == 5`を判定した結果、`false`を受け取った場合は、`{}`内の処理は行わず、次の処理へ移っていきます。

if文にはセットで使われる、`else`という条件文があるのであわせて学びましょう。

```java
int num = 5;
if (num == 5) {
     System.out.println("numは5です");
} else {
     System.out.println("numは5ではありません");
}
```

if文の`else`は、`if`の条件式を判定した結果が`false`だった場合に、`else{}`へ処理が移り`else{}`の`{}`ブロックの中に書かれた処理を実行します。

もう一つif文の書き方として学んでもらいたいのが、`else if`です。
`if`の条件も少し変えてみましょう。

```java
int num = 3
if (num == 1) {
    System.out.println("numは1です");
} else if (num == 2) {
    System.out.println("numは2です");
} else {
    System.out.println("numは1でも2でもありません");
}
```

`int num`変数を作成して、値を代入しています。  
numの値によって処理内容の分岐を決めています。

---

## 配列

テストでAさん、Bさん、Cさん、Dさん、Eさんの５人の点数を管理するプログラムを作りたいとします。

まずは、AさんからEさんの点数を入れるための変数を用意します。

```java
int scoreA;
int scoreB;
int scoreC;
int scoreD;
int scoreE;
```

同じような変数型を何度も書くのは面倒くさいです。下記のようにまとめて書くことも可能です。

```java
int scoreA, scoreB, scoreC, scoreD, scoreE;
```

でもやっぱり、同じような目的の変数をいくつも用意するのは面倒です。
そんな時は配列を使うと便利です。

### 配列の宣言と初期化

`scoreA`から`scoreE`までのintの宣言文をやめて、配列を使うために配列の宣言を書きます。
変数名は、`score`が複数あるので`scores`とします。

```java
int[] scores;
```

型の宣言の後ろに`[]`を書くことで、型の配列ができます。今回は`int[]`でint型の配列を作成しました。

次にint型の配列変数を初期化します。

```java
int[] scores;
scores = new int[5];
```

`new`についてですが、クラスやらオブジェクトやらインスタンスやら大事な要素なのですが、今はとりあえずの認識として、プログラムで便利な機能を使う事ができる道具を作っていると思ってください。
`new int[5]`で、５つの要素を持ったint型の配列の機能を持った道具を作って、道具を`scores`変数に代入しています。
初期化を行った時点で、各要素には全て`0`の値が入っています。

他の変数と同様に変数型の宣言と初期化を同時にできます。

```java
int[] scores = new int[5];
```

### 配列の各要素に値を代入

配列の各要素に今回の点数を代入してみましょう。

```java
int[] scores = new int[5];

scores[0] = 90;
scores[1] = 45;
scores[2] = 72;
scores[3] = 85;
scores[4] = 64;
```

`scores[]`の`[]`に、何番目の配列かをして、`=`で値を代入しています。
注意事項として、配列の一番最初の要素番号は、`0`から始まる事に注意してください。
今回は配列を５つ分用意していますが、配列の最後の要素番号を指定したい場合は、`scores[5]`にするとコンパイルエラーとなります。
配列の要素番号は0から始まっているので、最後の要素番号を指定する場合は、`scores[4]`となります。

これで配列を使わなかった場合は、int型の変数を５つ用意していたのが、int型の配列変数`scores`一つに全ての点数を保持できるようになりました。
5つぐらいなら頑張って変数を作ってもいいかなってなるかもしれませんが、配列であれば100でも1000でも一つの配列変数に保持する事が可能です。

配列を出力する場合は、

```java
int[] scores = new int[5];

scores[0] = 90;
scores[1] = 45;
scores[2] = 72;
scores[3] = 85;
scores[4] = 64;

System.out.println(scores[3]);
```

これで、配列変数`scores`の要素番号が`3`の値を出力できます。

配列は繰り返し文と組み合せての使用がよくあります。
次の繰り返し文もバッチリ修得しましょう。

---
